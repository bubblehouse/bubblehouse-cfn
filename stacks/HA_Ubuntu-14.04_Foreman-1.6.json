{
    "AWSTemplateFormatVersion": "2010-09-09",
    
    "Description": "Makerbot self-healing puppetmaster",
    
    "Parameters": {
        "BaseTag": {
            "Default": "foreman-dev",
            "Description": "The base instance tag.",
            "Type": "String"
        },
        "PublicDNSName": {
            "Default": "puppet",
            "Description": "The public name for this server.",
            "Type": "String"
        },
        "ProjectZone": {
            "Default": "bubblehouse.org",
            "Description": "The the zone of the instance.",
            "Type": "String"
        },
        "EC2InstanceType": {
            "Default": "t2.medium",
            "Description": "EC2 instance type, e.g. m1.small, m1.large, etc.",
            "Type": "String"
        },
        "RDSInstanceType": {
            "Default": "db.t2.small",
            "Description": "RDS instance type",
            "Type": "String"
        },
        "KeyPairName": {
            "Default": "bubblehouse-master_20140323",
            "Description": "Name of an SSH Keypair to use.",
            "Type": "String"
        },
        "ProjectPuppetModuleGitURL": {
            "Default": "git@github.com:philaunchConfigurationhristensen/bubblehouse-puppet.git",
            "Description": "A Git URL for the project puppet repo",
            "Type": "String"
        },
        "ProjectPuppetModuleShortName": {
            "Default": "bubblehouse",
            "Description": "The short name for a project module, usually just the client part of the ProjectPuppetModuleGitURL",
            "Type": "String"
        },
        "PuppetEnvironment": {
            "Default": "dev",
            "Description": "Puppet environment the new server will put itself in.",
            "Type": "String"
        },
        "ForemanAdminPassword": {
            "Default": "changeme",
            "NoEcho": true,
            "Description": "Default password for the admin user on the Foreman interface.",
            "Type": "String"
        },
        "ForemanDBPassword": {
            "Default": "eetujBint9",
            "NoEcho": true,
            "Description": "Default password for the foreman database user.",
            "Type": "String"
        },
        "SelectedImageId": {
            "Default": "ami-864d84ee",
            "Description": "The ID of an Ubuntu LTS 14.04 AMI to boot from (stock: ami-864d84ee).",
            "Type": "String"
        },
        "VpcId": {
            "Default": "us-east-1d",
            "Description": "Comma-separated list of availability zone IDs.",
            "Type": "CommaDelimitedList"
        },
        "PrivateSubnetAvailabiltyZoneIds": {
            "Default": "us-east-1d",
            "Description": "Comma-separated list of availability zone IDs.",
            "Type": "CommaDelimitedList"
        },
        "PrivateSecurityGroupIds": {
            "Default": "sg-46371d23",
            "Description": "Comma-separated list of security group IDs for the created instances.",
            "Type": "CommaDelimitedList"
        },
        "PrivateSubnetIds": {
            "Default": "subnet-c739c79e",
            "Description": "Comma-separated list subnets to hold the EC2 instances and static interface.",
            "Type": "CommaDelimitedList"
        },
        "PublicSecurityGroupIds": {
            "Default": "sg-7edbea1b",
            "Description": "Comma-separated list of security groups for the public ELB interface.",
            "Type": "CommaDelimitedList"
        },
        "PublicSubnetIds": {
            "Default": "subnet-ab758df2",
            "Description": "Comma-separated list of subnets to hold the public ELB interface.",
            "Type": "CommaDelimitedList"
        }
    },

    "Mappings": {
        "ConfigurationFiles": {
            "defaultHostGroupStub": {
                "Content": [
                    "---",
                    ":default_hostgroup:",
                    "    :map:"
                ]
            }
        }
    },

    "Outputs": {
        "AutoScaleNotificationQueue": {
            "Description" : "Notifications of terminated instances should be sent to this topic.",
            "Value" : { "Ref" : "autoScaleQueue" }
        }
    },

    "Resources": {
        "domainNamesNet" : {
            "Type" : "AWS::Route53::RecordSetGroup",
            "Properties" : {
                "HostedZoneName" : { "Fn::Join" : ["", [{ "Ref" : "ProjectZone"}, "."]]},
                "RecordSets" : [{
                    "Name" : { "Fn::Join" : [".", [{ "Ref" : "BaseTag"}, { "Ref" : "ProjectZone"}]]},
                    "Type" : "A",
                    "AliasTarget" : {
                        "HostedZoneId" : { "Fn::GetAtt" : ["loadBalancer", "CanonicalHostedZoneNameID"] },
                        "DNSName" : { "Fn::GetAtt" : ["loadBalancer", "CanonicalHostedZoneName"] }
                    }
                }, {
                    "Name" : { "Fn::Join" : [".", [{ "Ref" : "PublicDNSName"}, { "Ref" : "ProjectZone"}]]},
                    "Type" : "A",
                    "AliasTarget" : {
                        "HostedZoneId" : { "Fn::GetAtt" : ["internalStaticInterface", "PrimaryPrivateIpAddress"] },
                        "DNSName" : { "Fn::GetAtt" : ["internalStaticInterface", "PrimaryPrivateIpAddress"] }
                    }
                }]
            }
        },
        "iamRole": {
           "Type": "AWS::IAM::Role",
           "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [ "ec2.amazonaws.com" ]
                        },
                        "Action": [ "sts:AssumeRole" ]
                    }]
                },
                "Path": "/",
                "Policies": [ {
                    "PolicyName": "lw-puppetmaster",
                    "PolicyDocument": {
                        "Version" : "2012-10-17",
                        "Statement": [ {
                            "Effect": "Allow",
                            "Action": [
                                "cloudformation:*",
                                "ec2:AttachNetworkInterface"
                            ],
                            "Resource": "*"
                        }, {
                            "Effect": "Allow",
                            "Action": [
                                "ec2:Describe*",
                                "rds:Describe*",
                                "route53:ListHostedZones",
                                "s3:Get*",
                                "s3:List*",
                                "sdb:GetAttributes",
                                "sdb:List*",
                                "sdb:Select*",
                                "sns:Get*",
                                "sns:List*",
                                "sqs:ListQueues",
                                "sqs:GetQueueAttributes",
                                "sqs:ReceiveMessage",
                                "autoscaling:Describe*",
                                "elasticloadbalancing:Describe*",
                                "cloudwatch:Describe*",
                                "cloudwatch:List*",
                                "cloudwatch:Get*",
                                "iam:Get*",
                                "iam:List*"
                            ],
                            "Resource": "*"
                        }, {
                            "Effect": "Allow",
                            "Action": [
                                "route53:GetHostedZone",
                                "route53:ListResourceRecordSets",
                                "route53:ChangeResourceRecordSets"
                            ],
                            "Resource": "arn:aws:route53:::hostedzone/*"
                        }, {
                            "Effect": "Allow",
                            "Action": [
                                "route53:GetChange"
                            ],
                            "Resource":"arn:aws:route53:::change/*"
                        }]
                    }
                } ]
            }
        },
        "instanceProfile": {
           "Type": "AWS::IAM::InstanceProfile",
           "Properties": {
              "Path": "/",
              "Roles": [ { "Ref": "iamRole" } ]
           }
        },
        "internalStaticInterface" : {
            "Type" : "AWS::EC2::NetworkInterface",
            "Properties" : {
                "GroupSet" : { "Ref": "PrivateSecurityGroupIds" },
                "PrivateSubnetIds" : { "Ref": "PrivateSubnetIds" },
                "Tags" : [{ "Key" : "Name", "Value" : { "Fn::Join" : ["", [{ "Ref" : "BaseTag"}, "-eni"] ] } } ]
            }
        },
        "autoScaleQueue": {
            "Type" : "AWS::SQS::Queue",
            "Properties" : {
                
            }
        },
        "cfnForemanHostGroupQueue": {
            "Type" : "AWS::SQS::Queue",
            "Properties" : {
                
            }
        },
        "cfnForemanHostGroupTopic": {
            "Type" : "AWS::SNS::Topic",
            "Properties" : {
                "Subscription" : [{
                    "Endpoint" : { "Fn::GetAtt" : [ "cfnForemanHostGroupQueue", "Arn" ] },
                    "Protocol" : "sqs"
                }]
            }
        },
        "foremanDatabaseSecurityGroup": {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "VpcId" : {"Ref" : "VpcId"},
                "SecurityGroupIngress" : [{
                    "IpProtocol" : "tcp",
                    "FromPort" : "5432",
                    "ToPort" : "5432",
                    "CidrIp" : "0.0.0.0/0"
                }]
            }
        },
        "foremanDatabaseSubnetGroup": {
            "Type": "AWS::RDS::DBSubnetGroup",
            "Properties": {
                "SubnetIds": {"Ref" : "PublicSecurityGroupIds"}
            }
        },
        "foremanDatabase": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "AllocatedStorage"  : "5",
                "BackupRetentionPeriod": "1",
                "DBInstanceClass": { "Ref": "RDSInstanceType" },
                "DBName": "foreman",
                "DBSubnetGroupName": { "Ref": "foremanDatabaseSubnetGroup" },
                "Engine": "postgres",
                "MasterUserPassword": { "Ref" : "ForemanDBPassword" },
                "MasterUsername": "foreman",
                "MultiAZ": false,
                "VPCSecurityGroups": [ { "Ref" : "foremanDatabaseSecurityGroup"} ]
            }
        },
        "loadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "CrossZone": false,
                "ConnectionDrainingPolicy": {
                   "Enabled" : true,
                   "Timeout" : 300
                },
                "HealthCheck": {
                    "HealthyThreshold": "5",
                    "Interval": "30",
                    "Target": "TCP:80",
                    "Timeout": "5",
                    "UnhealthyThreshold": "3"
                },
                "Listeners": [{
                    "InstancePort": "80",
                    "LoadBalancerPort": "80",
                    "Protocol": "HTTP"
                }, {
                    "InstancePort": "443",
                    "LoadBalancerPort": "443",
                    "Protocol": "TCP"
                }],
                "SecurityGroups": { "Ref": "PublicSecurityGroupIds" },
                "Subnets": { "Ref": "PublicSubnetIds" }
            }
        },
        "autoScaleGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "DependsOn": ["launchConfiguration"],
            "Properties": {
                "AvailabilityZones": { "Ref": "AvailabiltyZoneIds" },
                "LaunchConfigurationName": { "Ref": "launchConfiguration" },
                "LoadBalancerNames": [{ "Ref": "loadBalancer" }],
                "Tags" : [ {
                     "Key" : "Name",
                     "Value" : { "Fn::Join" : ["", [{ "Ref" : "BaseTag"}, "-asg"] ] },
                     "PropagateAtLaunch" : "true"
                  } ],
                "MaxSize": "1",
                "MinSize": "1",
                "VPCZoneIdentifier": { "Ref": "PrivateSubnetIds" }
            }
        },
        "launchConfiguration": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "DependsOn": ["foremanDatabase", "iamRole", "instanceProfile"],
            "Properties": {
                "ImageId": { "Ref": "SelectedImageId" },
                "EC2InstanceType": { "Ref": "EC2InstanceType" },
                "IamInstanceProfile": { "Fn::GetAtt": ["instanceProfile", "Arn"] },
                "KeyName": { "Ref" : "KeyPairName" },
                "SecurityGroups": { "Ref": "PrivateSecurityGroupIds" },
                "UserData": { "Fn::Base64":
                    { "Fn::Join": [ "\n", [
                        "#!/bin/bash -ex",
                        "apt-get update",
                        "apt-get install -y python-pip",
                        "pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz",
                        { "Fn::Join": [ "", [
                            "cfn-init -v -c provision -s ", { "Ref": "AWS::StackName" }, " --region ", { "Ref": "AWS::Region" }, " -r launchConfiguration"
                        ]] },
                        { "Fn::Join" : ["", [
                            "cfn-signal --exit-code $? --reason DeployFailure --data BuildCompleted ", { "Ref" : "waitHandle" }
                        ]] }
                    ]] }
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Init" : {
                    "configSets": {
                        "provision": [
                            "install-apt-sources",
                            "install-packages",
                            "configure-hostname",
                            "attach-secondary-interface",
                            "install-foreman"
                        ],
                        "testing" : [
                            "register-hostname",
                            "install-client-puppetfile",
                            "librarian-puppet-support",
                            "librarian-puppet-install",
                            "configure-foreman"
                        ]
                    },
                    "install-apt-sources": {
                        "files": {
                            "/var/lib/apt/deb/puppetlabs-release-trusty.deb": {
                                "source" : "http://apt.puppetlabs.com/puppetlabs-release-trusty.deb"
                            },
                            "/etc/apt/sources.list.d/foreman.list" : {
                                "content" : { "Fn::Join" : ["\n", [
                                    "deb http://deb.theforeman.org/ trusty 1.6",
                                    "deb http://deb.theforeman.org/ plugins 1.6"
                                ]]},
                                "mode"  : "000644",
                                "owner" : "root",
                                "group" : "root"
                            }
                        },
                        "commands": {
                            "0001_puppet-dpkg-install": {
                                "command": "dpkg -i /var/lib/apt/deb/puppetlabs-release-trusty.deb",
                                "test": "test ! -e /usr/bin/puppet"
                            },
                            "0002_foreman-source-install-key": {
                                "command": "wget -q http://deb.theforeman.org/pubkey.gpg -O- | apt-key add -"
                            },
                            "0003_apt-get-update": {
                                "command": "sudo apt-get update"
                            }
                        }
                    },
                    "install-packages": {
                        "packages": {
                            "apt": { 
                                "puppet" : [],
                                "bundler" : [],
                                "git" : [],
                                "augeas-tools" : [],
                                "tree" : [],
                                "jq" : []
                            },
                            "python": {
                                "awscli" : []
                            }
                        }
                    },
                    "configure-hostname": {
                        "commands": {
                            "0000_generate-instance-slug": {
                                "command": "python -c \"print open('/var/lib/cloud/data/instance-id').read().split('-')[1][:3]\" > /etc/cloud/instance-slug"
                            },
                            "0001_set-hostname": {
                                "command":  { "Fn::Join": ["", [
                                    "echo ", { "Ref": "BaseTag" }, "-$(cat /etc/cloud/instance-slug).", { "Ref" : "ProjectZone"}, " > /etc/hostname"
                                ] ] }
                            },
                            "0002_set-boot-hostname": {
                                "command": "hostname -b $(cat /etc/hostname)"
                            },
                            "0003_set-mailname": {
                                "command": "cp /etc/hostname /etc/mailname"
                            },
                            "0004_modify-etc-hosts": {
                                "command": { "Fn::Join": [" && ", [
                                    "augtool set /files/etc/hosts/1/canonical $(cat /etc/hostname)",
                                    "augtool set /files/etc/hosts/1/alias[1] $(cat /etc/hostname | cut -d . -f 1)"
                                ] ] }
                            },
                            "0004_modify_routes": {
                                "command": "echo '200 out' >> /etc/iproute2/rt_tables"
                            }
                        }
                    },
                    "attach-secondary-interface": {
                        "files" : {
                            "/etc/cloud/etc-network-interfaces-d-eth1-template.mustache": {
                                "content" : { "Fn::Join": ["\n", [
                                    "# The secondary network interface",
                                    "auto eth1",
                                    "iface eth1 inet dhcp",
                                    " address {{ puppetmaster_ip }}",
                                    " netmask {{ puppetmaster_netmask }}",
                                    " up ip route add default via {{ puppetmaster_gateway }} dev eth1 table out",
                                    " up ip rule add from {{ puppetmaster_ip }}/32 table out",
                                    " up ip rule add to {{ puppetmaster_ip }}/32 table out",
                                    " up ip route flush cache"
                                ] ] },
                                "mode" : "000755",
                                "owner" : "root",
                                "group" : "root"
                            }
                        },
                        "commands": {
                            "0001_awscli-attach-network-interface": {
                                "command": { "Fn::Join": [ " ", [
                                    "aws", "ec2", "attach-network-interface",
                                    " --region", { "Ref" : "AWS::Region" },
                                    " --network-interface-id", { "Ref" : "internalStaticInterface" },
                                    " --device-index", "1",
                                    " --instance-id", "$(cat /var/lib/cloud/data/instance-id)"
                                ]] }
                            },
                            "0002_define-network-interface-vars" : {
                                "command": { "Fn::Join": [ "", [
                                    "jq -n",
                                    " --arg netmask \"$(ip route get 8.8.8.8 | head -1 | cut -d' ' -f8)\"",
                                    " --arg gateway \"$(route -n | grep ^0.0.0.0 | awk '{print $2}')\"",
                                    " '{",
                                    "puppetmaster_ip: \"", { "Fn::GetAtt" : ["internalStaticInterface", "PrimaryPrivateIpAddress"] } , "\", ",
                                    "puppetmaster_netmask: $netmask, ",
                                    "puppetmaster_gateway: $gateway",
                                    "}' > /etc/cloud/etc-network-interfaces-d-eth1-template.json"
                                ] ] },
                                "cwd": "/etc/cloud"
                            },
                            "0003_add-route-table": {
                                "command": "echo '200 out' >> /etc/iproute2/rt_tables",
                                "test": "grep '200 out' /etc/iproute2/rt_tables"
                            },
                            "0004_create-network-interface-cfg": {
                                "command": { "Fn::Join": [ "", [
                                    "pystache etc-network-interfaces-d-eth1-template.mustache",
                                    " etc-network-interfaces-d-eth1-template.json",
                                    " > /etc/network/interfaces.d/eth1.cfg"
                                ] ] },
                                "cwd": "/etc/cloud"
                            },
                            "0005_ifup-eth1": {
                                "command": "ifup eth1"
                            }
                        }
                    },
                    "install-foreman": {
                        "commands": {
                            "0001_foreman-source-install-key": {
                                "command": "apt-get install -y foreman-installer",
                                "test": "test ! -e /etc/puppet/rack"
                            },
                            "0002_foreman-install": {
                                "command": { "Fn::Join" : ["", [
                                    "foreman-installer",
                                    " --foreman-environment=", {"Ref":"PuppetEnvironment"},
                                    " --foreman-admin-password=", {"Ref":"ForemanAdminPassword"},
                                    " --foreman-db-host=", { "Fn::GetAtt" : ["foremanDatabase", "Endpoint.Address"] },
                                    " --foreman-db-password=", {"Ref":"ForemanDBPassword"},
                                    " --enable-foreman-plugin-default-hostgroup",
                                    " --enable-foreman-compute-ec2",
                                    " --foreman-db-manage=false"
                                ]]},
                                "test": "test ! -e /etc/puppet/rack",
                                "ignoreFail": true,
                                "cwd" : "/root",
                                "env" : {
                                    "PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
                                    "HOME" : "/root",
                                    "LANG" : "en_US.UTF-8"
                                }
                            },
                            "0003_set-puppet-environment": {
                                "command": { "Fn::Join" : [" ", ["augtool set /files/etc/puppet/puppet.conf/agent/environment", {"Ref":"PuppetEnvironment"}] ] }
                            },
                            "0004_set-enc-no-environment": {
                                "command": "augtool set /files/etc/puppet/puppet.conf/master/external_nodes \"/etc/puppet/node.rb --no-environment\""
                            }
                        }
                    },
                    "register-hostname": {
                        "files": {
                            "/etc/cloud/zone-update-request.json": {
                                "content" : {
                                    "Changes": [{
                                        "Action": "UPSERT",
                                        "ResourceRecordSet": {
                                            "Name": { "Fn::Join": [ ".", [ { "Ref": "PublicDNSName" }, { "Ref" : "ProjectZone"} ] ] },
                                            "Type": "CNAME",
                                            "TTL": 300,
                                            "ResourceRecords": [{
                                                "Value": { "Fn::GetAtt" : ["internalStaticInterface", "PrimaryPrivateIpAddress"] }
                                            }]
                                        }
                                    }]
                                },
                                "mode" : "000755",
                                "owner" : "root",
                                "group" : "root"
                            }
                        },
                        "commands": {
                            "0001_get-zone-id": {
                                "command": { "Fn::Join": [ "", [
                                    "aws route53 list-hosted-zones",
                                    " | jq -r '.HostedZones|map(select(.Name == \"", { "Ref" : "ProjectZone"}, ".\"))|.[0]|.Id'",
                                    " | cut -d / -f 3",
                                    " > /etc/cloud/zone-id"
                                ] ] }
                            },
                            "0002_submit-zone-update-request": {
                                "ignoreErrors": true,
                                "command": { "Fn::Join": [ "", [
                                    "aws route53 change-resource-record-sets",
                                    " --hosted-zone-id $(cat /etc/cloud/zone-id)",
                                    " --change-batch file:///etc/cloud/zone-update-request.json"
                                ] ] }
                            }
                        }
                    },
                    "install-client-puppetfile": {
                        "files": {
                            "/home/ubuntu/.ssh/lw-makerbot-deploy-key": {
                                "content": { "Fn::Join" : ["\n", [
                                    "-----BEGIN RSA PRIVATE KEY-----",
                                    "MIIEowIBAAKCAQEAwwBxq/wNa/DLbuU84tFGKzLlrFJVDbLwZOSrVcxvfF54tzwL",
                                    "D0ri96efgQYA0UYY8jOiqYwr7rCHmHoCQyuS85hd99lFHW3rCTFZUx0ZfVemyuaH",
                                    "hh1Y7cihkqZnM2+007hDm77dYw73wn7KyH4r4H2DuMyArllLPw59PWtnQgFh7P12",
                                    "yAezlnZlP/C5SnBsOm3f6tZnQtVLWWBRnoEEcUdZ1l+NtAkj6hIz0oo8IKBfb0Gk",
                                    "3gJn1VqPJrL8tRz7HvxZlM7mCbgInMEsRCH5kvQdgqQp89wDLDh8wlqK8MqUshrp",
                                    "Ab4vJb2MZ2WFscx1uE2rKFUeLJP3j3V4tnVKKQIDAQABAoIBAHVXtg+FTFpQ+0oP",
                                    "PjVLM4tZRGYO4UmuDQTZqdSmgcv4WXIB+rHIIY5f2xbcEu/b27Ubp12ZkPJAXkg9",
                                    "21CqTvKxFJLJttJ/y3irrpHaJ/WKIj9ku9bToCjum3PRGLcWGF1zO5PkJfqvDh6H",
                                    "B+XgLu0W+oXg4eqIp0QZpvmnwOoxN8QM1pTPhTJ/Sr5bYsKQMCqeg//UfAm5+N5u",
                                    "GjTnyOJqYG5Yzo2FmHaYGcHWdLXziJQaj4c9QlBGSPOv903JocbT5VdR9j76gX/7",
                                    "LeJzwFRMOw4IIYEzDkYGuWgfgU5GvzviyfhsyVjlm7ieVr8jy9PO0Y2Rg39oVClQ",
                                    "4pQa5gECgYEA5i3cdKREpDg5txY8LkKHMuNL0z8RCj/KmhhByY3w4DBkkIAgIwKR",
                                    "3SbCIx4q5znSsS78NeRu5CU5uZ3XTqzQ7hFKrvDsETgrlI11WzTZ+mfk0cbnQ0+A",
                                    "ns3dFTJaQMW6US2FYmIZP5iabsaTHJ3QjA9Dj+pnkS3hOltdYQb7lWkCgYEA2OBh",
                                    "WmlaunchConfigurationmaqjIcoWKn3cB17/AU1nH15WFfPLVyvzPyVZCmomEZI1gzJCcAYx1isBsvQC",
                                    "fzYLcFVyTJ5vmukS8wN94Jn8GTmWXnqyqQRQLWLrujOjgn23fQ4BxoNArmjIePAP",
                                    "vWB8IEISQO7rTW9JvpK8yRCwbXktrOSbZorptsECgYB/dTG4HSYtUT0UVumoLAq1",
                                    "cQuRxEBpTn2f6oKzWzfgzKtDIM+q00d2EHo7+/6B35D9sCjUptOI3dwjHnYVCLkA",
                                    "uu6CBMKTnmjzb4lmodN6R4F7cAqrSSDNzuz3SdSUPWk4fl535h5ZCuWpJahclj7e",
                                    "76zXylLjH2aya9k/WyCA0QKBgEDYHeOVex1q+qmgra34wa/mhGJUTVAAucaIhTTE",
                                    "LE+mEBBgGo/IYn2eqmSqRX5ej3x9Hr4AX70vnyQvfvkXVRYZ5ioggFLeeAo5r29/",
                                    "naVkXUzoIaxjgFhAtuEu30kGhWI7jMk3rwVKHAEULoCRlMAJSa7ocYfZ4oE+PQSU",
                                    "5jpBAoGBALEJKD7xzyhFDtvYfwuhYVQZ6yBZ/7S8N35ncvvKTInMscIxhgYRgONd",
                                    "XKi1cteXq550YOTIPdxt9DRE6pI8OllvQ4MPuLJMRXMUUB0rkhPQ9GxJK73zQO/v",
                                    "6vTp4Dt8hhj6ulAYL7e2CpBa5WuBHyN4gCwAuGoCtGH49ATbBmN2",
                                    "-----END RSA PRIVATE KEY-----"
                                ] ] },
                                "mode"  : "000600",
                                "owner" : "ubuntu",
                                "group" : "ubuntu"
                            },
                            "/home/ubuntu/.ssh/lw-makerbot-deploy-key.pub": {
                                "content": { "Fn::Join" : ["", [
                                    "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDDAHGr/A1r8Mtu5Tzi0UYr",
                                    "MuWsUlUNsvBk5KtVzG98Xni3PAsPSuL3p5+BBgDRRhjyM6KpjCvusIeYegJD",
                                    "K5LzmF332UUdbesJMVlTHRl9V6bK5oeGHVjtyKGSpmczb7TTuEObvt1jDvfC",
                                    "fsrIfivgfYO4zICuWUs/Dn09a2dCAWHs/XbIB7OWdmU/8LlKcGw6bd/q1mdC",
                                    "1UtZYFGegQRxR1nWX420CSPqEjPSijwgoF9vQaTeAmfVWo8msvy1HPse/FmU",
                                    "zuYJuAicwSxEIfmS9B2CpCnz3AMsOHzCWorwypSyGukBvi8lvYxnZYWxzHW4",
                                    "TasoVR4sk/ePdXi2dUop lw-makerbot-deploy-key"
                                ] ] },
                                "mode"  : "000600",
                                "owner" : "ubuntu",
                                "group" : "ubuntu"
                            },
                            "/home/ubuntu/.ssh/known_hosts": {
                                "content": { "Fn::Join" : ["", [
                                    "|1|+5i2kn0Avz3qi6pqRpNzGSb380Q=|LvVvoUaPqDwrx8kOeDkOUpuxMP0=",
                                    " ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwB",
                                    "K6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUs",
                                    "yCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh",
                                    "7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9n",
                                    "zpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvd",
                                    "sjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA",
                                    "8VJiS5ap43JXiUFFAaQ==\n",
                                    "|1|RgiDHjYH9iYFtbExnrlmsrSIAR8=|GzuNJbjpmx38yuymaY5GZJbopo4=",
                                    " ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwB",
                                    "K6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUs",
                                    "yCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh",
                                    "7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9n",
                                    "zpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvd",
                                    "sjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA",
                                    "8VJiS5ap43JXiUFFAaQ==\n"
                                ] ] },
                                "mode"  : "000600",
                                "owner" : "ubuntu",
                                "group" : "ubuntu"
                            },
                            "/home/ubuntu/.ssh/config": {
                                "content": { "Fn::Join" : ["\n", [
                                    "Host github.com",
                                    "    IdentityFile ~/.ssh/lw-makerbot-deploy-key"
                                ] ] },
                                "mode"  : "000600",
                                "owner" : "ubuntu",
                                "group" : "ubuntu"
                            }
                        },
                        "commands": {
                            "0001_root-ssh-setup": {
                                "command": "cp /home/ubuntu/.ssh/lw-makerbot-deploy-key* /home/ubuntu/.ssh/known_hosts /home/ubuntu/.ssh/config /root/.ssh/."
                            },
                            "0002_root-ssh-setup": {
                                "command": "chown root:root /root/.ssh/*"
                            },
                            "0003_root-ssh-setup": {
                                "command": "chmod 600 /root/.ssh/lw-makerbot-deploy-key"
                            },
                            "0004_git-empty-clone-client-module": {
                                "command": { "Fn::Join": ["", ["git clone -n --depth 1 ", {"Ref":"ProjectPuppetModuleGitURL"}, " .clientbase" ] ] },
                                "test": "test ! -e /usr/share/puppet/.clientbase",
                                "cwd": "/usr/share/puppet/"
                            },
                            "0005_git-fetch-latest": {
                                "command": "git fetch",
                                "cwd": "/usr/share/puppet/.clientbase"
                            },
                            "0006_git-checkout-latest-puppetfile": {
                                "command": "git checkout HEAD Puppetfile",
                                "cwd": "/usr/share/puppet/.clientbase"
                            },
                            "0007_link-puppetfile": {
                                "command": "ln -s /usr/share/puppet/.clientbase/Puppetfile /usr/share/puppet/Puppetfile",
                                "test": "test ! -e /usr/share/puppet/Puppetfile"
                            }
                        }
                    },
                    "librarian-puppet-support": {
                        "files" : {
                            "/etc/puppet/autosign.conf" : {
                                "content" : "*",
                                "mode"  : "000644",
                                "owner" : "root",
                                "group" : "root"
                            },
                            "/usr/share/puppet/Gemfile" : {
                                "content" : { "Fn::Join": ["\n", [
                                    "source 'https://rubygems.org'\n",
                                    "gem 'librarian-puppet'",
                                    "gem 'io-console'"
                                ] ] },
                                "mode"  : "000644",
                                "owner" : "root",
                                "group" : "root"
                            }
                        }
                    },
                    "librarian-puppet-install": {
                        "commands": {
                            "0001_install-bundle": {
                                "command": "bundle install --path=vendor/bundle",
                                "cwd": "/usr/share/puppet"
                            },
                            "0002_git-init": {
                                "command": "git init",
                                "test": "test ! -e /usr/share/puppet/.git",
                                "cwd": "/usr/share/puppet"
                            },
                            "0003_configure-librarian-puppet": {
                                "command": "yes no | bundle exec librarian-puppet init",
                                "test": "test ! -e /usr/share/puppet/.librarian",
                                "cwd": "/usr/share/puppet",
                                "env" : {
                                    "PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
                                    "HOME" : "/root",
                                    "LANG" : "en_US.UTF-8",
                                    "PWD"  : "/usr/share/puppet"
                                }
                            },
                            "0004_install-puppet-modules": {
                                "command": "bundle exec librarian-puppet install",
                                "cwd": "/usr/share/puppet",
                                "env" : {
                                    "PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
                                    "HOME" : "/root",
                                    "LANG" : "en_US.UTF-8",
                                    "PWD"  : "/usr/share/puppet"
                                }
                            }
                        }
                    },
                    "configure-foreman": {
                        "files": {
                            "/etc/hammer/cli.modules.d/foreman.yml": {
                                "content" : { "Fn::Join": ["\n", [
                                    "foreman:",
                                    "  # Enable/disable foreman commands",
                                    "  :enable_module: true",
                                    "  # Your foreman server address",
                                    "  :host: 'https://", { "Fn::Join": [".", [{ "Ref": "PublicDNSName" }, { "Ref" : "ProjectZone"}]] }, "'",
                                    "  :username: 'admin'",
                                    "  :password: '", {"Ref":"ForemanAdminPassword"}, "'"
                                ]] },
                                "mode"  : "000600",
                                "owner" : "foreman",
                                "group" : "foreman"
                            },
                            "/etc/cloud/define-hostgroups.py": {
                                "content" : { "Fn::Join": ["\n", [
                                    "#!/usr/bin/python",
                                    "import subprocess, json, csv",
                                    "cli = subprocess.check_output",
                                    "cmd = ['/usr/bin/hammer', '--csv',",
                                    "    'puppet-class', 'list', '--search']",
                                    "with open('site.json') as f:",
                                    "    for n,g in json.loads(f.read()).items():",
                                    "        ids = ','.join([",
                                    "            cli(cmd + [k]).split('\\n')[1].split(',')[0]",
                                    "        for k in g['classes']])",
                                    "        cli(['/usr/bin/hammer', 'hostgroup', 'create',",
                                    "            '--name', n,",
                                    "            '--environment', g['env'],",
                                    "            '--puppetclass-ids', ids])"
                                ] ] },
                                "mode"  : "000755",
                                "owner" : "root",
                                "group" : "root"
                            },
                            "/etc/cloud/define-hostgroup-map.py": {
                                "content" : { "Fn::Join": ["\n", [
                                    "#!/usr/bin/python",
                                    "import sys, json",
                                    "d = json.loads(open('site.json').read())",
                                    "print \"---\\n:default_hostgroup:\\n    :map:\"",
                                    "print \"\n\".join(['        \"%s\": %s' % (n, g['pattern']) for n,g in d.items()])"
                                ] ] },
                                "mode"  : "000755",
                                "owner" : "root",
                                "group" : "root"
                            }
                        },
                        "commands": {
                            "0001_set-update_environment_from_facts": {
                                "command": "echo :update_environment_from_facts: true >> /etc/foreman/settings.yaml",
                                "test": "grep update_environment_from_facts /etc/foreman/settings.yaml || true"
                            },
                            "0002_define-hostgroups": {
                                "command": "python define-hostgroups.py",
                                "cwd": "/etc/cloud"
                            },
                            "0003_define-hostgroup-map": {
                                "command": "python define-hostgroup-map.py > /usr/share/foreman/config/settings.plugins.d/default_hostgroup.yaml",
                                "cwd": "/etc/cloud"
                            },
                            "0003_restart-apache": {
                                "command": "service apache2 restart"
                            }
                        }
                    }
                }
            }
        },
        "wait": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "autoScaleGroup",
            "Properties": {
                "Handle": { "Ref": "waitHandle" },
                "Timeout": "1800"
            }
        },
        "waitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle",
            "Properties": {}
        }
    }
}
